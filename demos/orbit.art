struct color color;

shape circle 
{
    vec o;
    double r;
    struct color col;
}

circle::circle(vec origin, double radius, struct color c)
{
    o = origin;
    r = radius;
    col = c;
}

void circle::draw()
{
    setcolor(col);
    [
        for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) {
            drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
            drawpoint(o + r*<cos(theta), sin(theta)>);
        }
        drawpoint(o);
    ]
}

shape disk 
{
    double r;
    vec o;
    struct color col;
}

disk::disk(vec origin, double radius, struct color c)
{
    o = origin;
    r = radius;
    col = c;
}

void disk::draw()
{
    setcolor(col);
    <<
        for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) 
        {
            drawpoint(o);
            drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
            drawpoint(o + r*<cos(theta), sin(theta)>);
        }
    >>
}

int main()
{   
    struct color red = color(1.0, 0.0, 0.0);
    struct color green = color(0.0, 1.0, 0.7);
    struct color grey = color(0.5, 0.5, 0.5);

    shape disk c = disk(<0.0, 0.0>, 0.1, green);
    shape disk d = disk(<0.0, 0.0>, 0.20, red);
    shape circle p = circle(<0.0, 0.0>, 0.83, grey);
    
    addshape(d, c, p); 

    double theta = 0;
    vec o = <0.0, 0.0>;

    timeloop (dt = 0.001 ; end = 10.0)
    {
        theta -= .010 * PI;
        c.o = o + 8.3 * c.r * <cos(theta),sin(theta)>;
        //d.o = o + 1.3 * d.r * <cos(theta),sin(theta)>;
    }

    /*
    addshape(c);
    color.g = 1.0; color.r = color.b = 0.0;

    timeloop (dt = 0.001 ; end = 10.0)
    {
        theta += .010 * PI;
        c.o = o + 4.3 * c.r * <cos(theta),sin(theta)>;
        //d.o = o + 4.3 * d.r * <cos(theta),sin(theta)>;
    }
    */
}