struct color color;

/* A cicle with origin at x,y with radius r */
shape circle 
{
    double r;
    vec o;
}

circle::circle(vec origin, double radius)
{
    o = origin;
    r = radius;
}


// This is the function from the example
/* Notice that it only uses draw points. */
void circle::draw()
{
    setcolor(color);
    // Single circle is 1000 points YIKES
[
    for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) {
        drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
        drawpoint(o + r*<cos(theta), sin(theta)>);
    }
    drawpoint(o);
]
}

shape disk 
{
    double r;
    vec o;
}

disk::disk(vec origin, double radius)
{
    o = origin;
    r = radius;
}


// This is the function from the example
/* Notice that it only uses draw points. */
void disk::draw()
{
    setcolor(color);
<<
    for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) {
         drawpoint(o);
        drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
        drawpoint(o + r*<cos(theta), sin(theta)>);
    }
>>
}
// this is a path shape
// a drawable circular buffer of points
shape path
{
    int f, b;
    vec[128] p;
}

path::path() { f = 0; b = 0; }

int MOD(int x) 
{
    return x % 128;  
} 

void path::draw()
{
    setcolor(color);
[
    if ( f != b)
    for (int i = MOD(f) + 1;  MOD(i) != MOD(b); i+=1) {    
        drawpoint(p[MOD(i-1)]);
        drawpoint(p[MOD(i)]);
    }
]
   
}


void path::add_point(vec x)
{
    p[MOD(b)] = x;
    b+=1;

    // if we run out of space
    if (MOD(b) == MOD(f))
        f+=1;
}

void path::reset() { f = b = 0;}

int main()
{   

    shape circle c = circle(<0.0, 0.0>, 0.25);
    shape disk d  = disk(<0.0, 0.0>, 0.15);
    shape path p = path();
    double theta = 0.0;
    vec o = <0.0,0.0>;
    PI = 3.14159265;
    
    addshape(c); 
    addshape(p);

    // first in red
    color.r = 1.0; color.b = color.g = 0.0;
    printf(theta);
    printc('\n');
   timeloop (dt = 0.001 ; end = 10.0)
    {
        theta += .010 * PI;
        c.o = o + 1.3 * c.r * <cos(theta),sin(theta)>;
        p.add_point(c.o);
    }
    printf(theta);
    printc('\n');


    // then in blue
    color.b = 1.0; color.r = color.g = 0.0;

 // Readd shapes since they removed after the end of a time loop
    addshape(d); 
    addshape(p);
    p.reset();

    timeloop (dt = 0.001; end = 10.0)
    {
        theta += .010 * PI;
        d.o = o + 1.3 * d.r * <cos(theta),sin(theta)>;
        p.add_point(d.o);
    }  
    return 0;
}
