struct color color;

shape rectangle
{
    vec bl; // bottom left corner
    double w,h; // widht height
    int fill;
}

rectangle::rectangle(vec _bl, double _w, double _h , int f)
{
    bl = _bl;
    w = _w;
    h = _h;
    fill = f;
}

void rectangle::draw()
{
    setcolor(color);
    if (fill == 1)
        <<
            drawpoint(bl);drawpoint(bl+<w,0.0>);drawpoint(bl+<0.0,h>);
            drawpoint(bl + <w,h>);drawpoint(bl+<w,0.0>);drawpoint(bl+<0.0,h>);
        >>
    else
        [
            drawpoint(bl);drawpoint(bl+<w,0.0>);
            drawpoint(bl+<w,0.0>);drawpoint(bl+<w,h>);
            drawpoint(bl+<w,h>);drawpoint(bl+<0.0,h>);
            drawpoint(bl+<0.0,h>);drawpoint(bl);
        ]

}

/* A cicle with origin at x,y with radius r */
shape circle 
{
    double r;
    vec o;
}

circle::circle(vec origin, double radius)
{
    o = origin;
    r = radius;
}


// This is the function from the example
/* Notice that it only uses draw points. */
void circle::draw()
{
    setcolor(color);
    // Single circle is 1000 points YIKES
[
    for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) {
        drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
        drawpoint(o + r*<cos(theta), sin(theta)>);
    }
    drawpoint(o);
]
}

shape disk 
{
    double r;
    vec o;
}

disk::disk(vec origin, double radius)
{
    o = origin;
    r = radius;
}


// This is the function from the example
/* Notice that it only uses draw points. */
void disk::draw()
{
    setcolor(color);
<<
    for (double theta = 0.0; theta <= 2  * PI; theta += .05 * PI) {
         drawpoint(o);
        drawpoint(o + r*<cos(theta - 0.05*PI), sin(theta-0.05*PI)>);
        drawpoint(o + r*<cos(theta), sin(theta)>);
    }
>>
}
// this is a path shape
// a drawable circular buffer of points
shape path
{
    int f, b;
    vec[128] p;
}

path::path() { f = 0; b = 0; }

int MOD(int x) 
{
    return x % 128;  
} 

void path::draw()
{
    setcolor(color);
[
    if ( f != b)
    for (int i = MOD(f) + 1;  MOD(i) != MOD(b); i+=1) {    
        drawpoint(p[MOD(i-1)]);
        drawpoint(p[MOD(i)]);
    }
]
   
}


void path::add_point(vec x)
{
    p[MOD(b)] = x;
    b+=1;

    // if we run out of space
    if (MOD(b) == MOD(f))
        f+=1;
}

void path::reset() { f = b = 0;}

shape bouncy
{
    shape rectangle boundary;
    shape disk d;
    vec v;
}

bouncy::bouncy(vec vi)
{
    boundary = rectangle(<-1.0,-1.0>,2.0,2.0,0);
    d = disk(<0.0, 0.0>, 0.15);
    v = vi;
}

void bouncy::draw()
{
    boundary.draw();
    d.draw();
}

double dot(vec v1, vec v2)
{
    return v1[0]*v2[0] + v1[1]*v2[1];
}
void bouncy::update(double dt)
{
    int ref = 0;
    vec bl = boundary.bl, tr = bl + <boundary.w, boundary.h>;
    d.o += dt * v;
    if ( (d.o[0] + d.r >= tr[1]) || (d.o[0] - d.r <= bl[1]) ){
        v[0] = -v[0];
        ref = 1;
    }
    if ( (d.o[1] + d.r >= tr[0]) || (d.o[1] - d.r <= bl[0]) ){
        v[1] = -v[1];
        ref = 1;
    }
    if (ref == 1)
        d.o += dt * v;
}
int main()
{   

    shape circle c = circle(<0.0, 0.0>, 0.25);
    shape rectangle r = rectangle(<-1.0,-1.0>,2.0,2.0,0);
    shape disk d  = disk(<0.0, 0.0>, 0.15);
    shape path p = path();
    shape bouncy bz = bouncy(<1.0,1.0>);
    double theta = 0.0;
    vec o = <0.0,0.0>;
    PI = 3.14159265;
    
    addshape(bz); 
    addshape(p);
    bz.d.o = <-.4, 0.2>;
    // first in red
    color.r = 1.0; color.b = color.g = 0.0;
    printf(theta);
    printc('\n');
    timeloop (dt = 0.01 ; end = 30.0)
    {
        theta += .010 * PI;
       // r.bl = o + 1.3 * r.w * <cos(theta),sin(theta)>;
       // p.add_point(r.bl);
       
       bz.update(dt);
    }
    printf(theta);
    printc('\n');


    return 0;
}
