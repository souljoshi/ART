shape disk
{
	int radius;
	vec center;
}



disk::disk(int r, vec c) 
{
	Radius = r;
	Center = c;
for (int x; ; ) {}
}

void disk::draw()
{
	for ( double theta = 0; theta <= 2 * math.pi ; theta += .01*math.pi) 
	{
		for (int rad = 0; rad <= radius; rad += 0.01) 
{
			#drawpoint(c + rad*sin(theta)); //vector-type expression.
		}
}
}  

void disk::translate(vec v)
{
	Center = center + v;
}
/*
shape projectile
{
	struct Disk d;
	vec velocity;
	double g; // gravity
}


void projectile::projectile(struct disk& d0, vec v, double grav)
{
	D = d0;
	Velocity = v;
	G = grav;
}


void projectile::draw()
{
	d.draw();
}


void projectile::update(double dt)
{
	d.translate(velocity * dt);
Velocity[1] = velocity[1] + g*dt;
}
*/
