struct color { double r,g,b; }

struct color color;

double PI;

/* A cicle with origin at x,y with radius r */
shape circle 
{
    double r;
    double ox;
    double oy;
}

circle::circle(double x, double y, double radius)
{
    ox = x;
    oy = y;
    r = radius;
}

int g(double x)
{
    return 0;
}
// This is the function from the example
/* Notice that it only uses draw points. */
void circle::draw()
{
    double theta;
    double rad; 
    theta = 0.0;
    rad = 0.0;

    // Single circle is 1000 points YIKES
    glcolor(1.0, 0.0, 0.0);
    for (theta = 0.0; theta <= 2  * PI; theta += .001 * PI) {
        glbegin();
        drawpoint(ox +r * cos(theta), oy + r * sin(theta));
        glend();
    }

}

// this is a path shape
// a drawable circular buffer of points
shape path
{
    int f, b;
    double[128] px;
    double[128] py;

}
int MOD(int x) 
{
    return x % 128;  
} 

path::path()
{
    int i;
    glcolor(1.0, 0.0, 0.0);
    for (i = MOD(f) ; MOD(i) != MOD(b); i+=1) {
       px[MOD(i)] = 1.0 * i;
       py[MOD(i)] = 1.0 * i;

    }
    

}
void path::draw()
{
    int i;
    glcolor(1.0, 0.0, 0.0);
    for (i = MOD(f) ; MOD(i) != MOD(b); i+=1) {
        drawpoint(px[MOD(i)], py[MOD(i)]);
    }
    
}


void path::add_point(double x, double y)
{
    px[MOD(b)] = x;
    py[MOD(b)] = y;
    b+=1;
    // if we run out of space
    if (MOD(b) == MOD(f))
        f+=1;
}
double g_last_time;
double g_delay;

// Definition is necessary
void idle()
{
    double current_time;
    current_time = seconds();

    if (current_time - g_last_time >= g_delay)
    {
        // we may skip some steps depending on how slow the computer is
       
        // executes loop body ones
            theta += .010 * PI;
            c. ox = ox + 1.3 * c.r *cos(theta);
            c. oy = oy + 1.3 * c.r * sin(theta);
            p.add_point(c.ox, c.oy);
        
         g_last_time = current_time;

        glut_repost();
    }
}


shape circle c;
shape path p;
double theta;
double ox;
double oy;

// Definition is necessary
void timer_callback(int nothing)
{
}

// Definition is necessary
void draw()
{
    glclear();
    // Put Here
    c.draw();
    p.draw();
    // End Here
    glswap();
}

int y;
int main()
{
    c = circle(0.0, 0.0, 0.25);
    //p = path();
    g_last_time = seconds();
    PI = 3.14159265;

	glut_init(1); //(* Inputing timer value *)
	
}
